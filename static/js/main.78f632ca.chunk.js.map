{"version":3,"sources":["App.js","js/functions/schedule.js","js/functions/getFlightData.js","reportWebVitals.js","index.js"],"names":["App","React","useState","flights","setFlights","getFlights","fetch","then","response","json","DD","Date","getDate","MM","getMonth","date","getFullYear","events","j","Object","keys","vcalendar","vevent","forEach","data","i","dtstart","substr","summary","flightNumber","origin","destination","push","console","log","catch","err","results","getData","flight","headers","Accept","method","getFlightData","className","type","title","onClick","value","id","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNAmGeA,MA9Ff,WAEE,MAA8BC,IAAMC,SAAS,CAC3C,CAAC,GAAO,EAAG,aAAiB,SAAU,OAAU,MAAO,YAAe,OACtE,CAAC,GAAO,EAAG,aAAiB,SAAU,OAAU,MAAO,YAAe,SAFxE,mBAAOC,EAAP,KAAgBC,EAAhB,KAMA,SAASC,ICgBFC,MAAM,4BAA4BC,MAAK,SAAAC,GAE5C,OAAOA,EAASC,UACfF,MAAK,SAAAC,GAEN,IAAIE,GAAK,IAAIC,MAAOC,UAChBF,EAAK,KACPA,EAAK,IAAMA,GAEb,IAAIG,GAAK,IAAIF,MAAOG,WAAa,EAC7BD,EAAK,KACPA,EAAK,IAAMA,GAEb,IACIE,EAAO,IADF,IAAIJ,MAAOK,cACCH,EAAKH,EAItBO,EAAS,GACTC,EAAI,EAgDR,OA/CAC,OAAOC,KAAKZ,EAASa,UAAU,GAAGC,QAAQC,SAAQ,SAASC,EAAMC,GAW/D,GAAGV,IAASP,EAASa,UAAU,GAAGC,OAAOG,GAAGC,QAAQC,OAAO,EAAE,IAA8D,OAAxDnB,EAASa,UAAU,GAAGC,OAAOG,GAAGG,QAAQD,OAAO,EAAE,GAAY,CAM9H,IAAIE,EAAerB,EAASa,UAAU,GAAGC,OAAOG,GAAGG,QAAQD,OAAO,EAAE,GAChEG,EAAStB,EAASa,UAAU,GAAGC,OAAOG,GAAGG,QAAQD,OAAO,EAAE,GAC1DI,EAAcvB,EAASa,UAAU,GAAGC,OAAOG,GAAGG,QAAQD,OAAO,GAAG,GAEpEV,EAAOe,KAAK,CACV,GAAOd,EACP,aAAiBW,EACjB,OAAWC,EACX,YAAgBC,IAElBb,QAKJe,QAAQC,IAAIjB,GAeLA,KACNkB,OAAM,SAAAC,GACPH,QAAQC,IAAIE,MDpFF7B,MAAM,SAAA8B,GACdjC,EAAWiC,MAIf,SAASC,EAAQC,IEjBJ,SAAuBA,GACpCN,QAAQC,IAAIK,GAYJjC,MAAM,sHAAuH,CAEpIkC,QAAS,CACPC,OAAQ,mBACR,WAAa,oCAEfC,OAAQ,QAETnC,MAAK,SAAAC,GAEJ,OADAyB,QAAQC,IAAI1B,GACLA,EAASC,UAEjBF,MAAK,SAAAC,GACJyB,QAAQC,IAAI,SACZD,QAAQC,IAAI1B,MFTXmC,CAAcJ,GAkBhB,OACE,qBAAKK,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,yCAEA,wBAAQC,KAAK,SACXC,MAAM,qBACNC,QAAS,WAAO1C,KAChB2C,MAAO7C,EAHT,iCAOA,sBAEA,wBAAQ0C,KAAK,SACXC,MAAM,WACNC,QAAS,WA9Bfd,QAAQC,IAAI/B,GACZ8B,QAAQC,IAAI/B,EAAQ,GAAG8C,IACvBhB,QAAQC,IAAI/B,EAAQ,GAAG0B,cACvBI,QAAQC,IAAI/B,EAAQ,GAAG8C,IACvBhB,QAAQC,IAAI/B,EAAQ,GAAG0B,eAwBnB,yBAMA,8CAEA,6BAEA,6BACA,wBAAQgB,KAAK,SACXC,MAAM,UACNC,QAAS,WAAOT,EAAQ,YAF1B,+BADQ,kBGlDDY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB7C,MAAK,YAAkD,IAA/C8C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.78f632ca.chunk.js","sourcesContent":["import './App.css';\nimport React from 'react';\nimport getICSP from './js/functions/schedule';\nimport getFlightData from './js/functions/getFlightData';\n\nfunction App() {\n\n  const [flights, setFlights] = React.useState([\n    {'id' : 0, 'flightNumber' : 'KL1501', 'origin': 'AMS', 'destination': 'VLC'},\n    {'id' : 1, 'flightNumber' : 'KL1503', 'origin': 'AMS', 'destination': 'VLC'}\n  ]);\n\n\n  function getFlights() {\n    getICSP().then( results => {\n      setFlights(results);\n    });\n  }\n\n  function getData(flight) {\n    getFlightData(flight);\n  }\n\n  function logFlights(){\n    console.log(flights);\n    console.log(flights[0].id);\n    console.log(flights[0].flightNumber);\n    console.log(flights[1].id);\n    console.log(flights[1].flightNumber);\n/*\n    return fetch('http://localhost:5000/getData').then(response => {\n      return response.json();\n    }).then(response => {\n      console.log(response);\n    });\n*/\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Logboek</h1>\n\n        <button type=\"button\"\n          title='vluchtdata ophalen'\n          onClick={() => {getFlights()}}\n          value={flights}\n        >Vluchtdata ophalen!\n        </button>\n\n        <p/>\n\n        <button type=\"button\"\n          title='flights?'\n          onClick={() => {logFlights()}}\n        >log flights\n        </button>\n\n        <p>Flight List: </p>\n\n        <ul>\n\n        <li key=\"KL1503\">\n        <button type=\"button\"\n          title=\"KLM1503\"\n          onClick={() => {getData(\"KLM1503\")}}>\n          KL1503 AMS - VLC\n        </button>\n        </li>\n        {/*flights.map(item => (\n        <li key={item.id}>\n        <button type=\"button\"\n          title={item.flightNumber}\n          onClick={getData.bind(this, item.flightNumber)}>\n          {item.flightNumber} {item.origin} - {item.destination}\n        </button>\n        </li>\n      ))*/}\n        </ul>\n\n\n      </header>\n    </div>\n\n  );\n}\n/*\n<ul>\n{flights.map(item => (\n  /*<button type=\"button\"\n  title='index'\n  onClick={getFlightData(item)}\n>{item}\n</button>*//*\n<li key={item}>{item}</li>\n))}\n</ul>*/\n// {item.flightNumber} {item.origin} - {item.destination}\n\nexport default App;\n","//import convert from './IcsConverter';\n\n\nexport default function getICSP() {\n  /*\n  return fetch(\n    //'https://klc-rooster.nl/79dff3d4d99e4c83fff5fc4d4bf114eb.ics'\n    '../../json/rooster-15mei21.json'\n  )\n    .then(response => {\n      return response.json();\n    })\n\n    //.then(response => response.json())\n\n    .then(response => {\n      console.log(response);\n      var output = convert(response);\n      console.log('we zijn hier aangekomen');\n      console.log(output);\n\n    })\n    .catch(err => {\n      console.log(err);\n    });\n    */\n\n\n    // Replace ./data.json with your JSON feed\n  return fetch('./rooster-voorbeeld.json').then(response => {\n    //console.log(response);\n    return response.json();\n  }).then(response => {\n\n    var DD = new Date().getDate();\n    if (DD < 10) {\n      DD = '0' + DD;\n    }\n    var MM = new Date().getMonth() + 1;\n    if (MM < 10) {\n      MM = '0' + MM;\n    }\n    var YY = new Date().getFullYear();\n    var date = '' + YY + MM + DD;\n    //var date = '20210621';\n    //console.log(date);\n\n    var events = [];\n    var j = 0;\n    Object.keys(response.vcalendar[0].vevent).forEach(function(data, i) {\n      /*\n      console.log(index);\n      console.log(data);\n      console.log(index.summary);\n      console.log([index].summary);\n\n      console.log('summary: ' + response.vcalendar[0].vevent[index].summary);\n      console.log('dtstart: ' + response.vcalendar[0].vevent[index].dtstart.substr(0,8));\n      */\n      //check of var 'date' gelijk is aan datum uit het 'event' in de json file en of de summary 'KL' bevat, anders krijg je ook het 'Flight day' event mee.\n      if(date === response.vcalendar[0].vevent[i].dtstart.substr(0,8) && response.vcalendar[0].vevent[i].summary.substr(0,2) === \"KL\"){\n        /*\n        console.log('summary: ' + response.vcalendar[0].vevent[i].summary);\n        console.log('dtstart: ' + response.vcalendar[0].vevent[i].dtstart.substr(0,8));\n        console.log('!VANDAAG!');\n        */\n        var flightNumber = response.vcalendar[0].vevent[i].summary.substr(0,6);\n        var origin = response.vcalendar[0].vevent[i].summary.substr(7,3);\n        var destination = response.vcalendar[0].vevent[i].summary.substr(11,3);\n\n        events.push({\n          \"id\" : j,\n          \"flightNumber\" : flightNumber,\n          \"origin\" : origin,\n          \"destination\" : destination\n        });\n        j++;\n      }\n\n    })\n\n    console.log(events);\n\n    //props.onchange\n\n    /*\n    .then(function(response) {\n        var names=[];\n        Object.keys(response.data).forEach(function(data) {\n             names.push(data.Name);\n        })\n        self.setState({\n            jdata: names\n        });\n    })\n    */\n    return events;\n  }).catch(err => {\n    console.log(err);\n  });\n}\n","//import axios from 'axios';\n\nexport default function getFlightData(flight) {\n  console.log(flight);\n\n  /*\n\n  curl -X GET \"https://aeroapi.flightaware.com/aeroapi/flights/KLM1503?start=2022-10-05T19%3A59%3A59Z&end=2022-10-07T19%3A59%3A59Z\" \\\n   -H \"Accept: application/json; charset=UTF-8\" \\\n   -H \"x-apikey:  vbWAKQDHJJFEvXrUHBf7V62caCbfshgP\" \\\n\n   */\n\n\n\n   return fetch(\"https://aeroapi.flightaware.com/aeroapi/flights/KLM1503?start=2022-10-06T19%3A59%3A59Z&end=2022-10-08T19%3A59%3A59Z\", {\n   //mode: 'no-cors',\n   headers: {\n     Accept: \"application/json\",\n     \"x-apikey\" : \"vbWAKQDHJJFEvXrUHBf7V62caCbfshgP\"\n   },\n   method: \"GET\"\n })\n .then(response => {\n   console.log(response);\n   return response.json();\n })\n .then(response => {\n   console.log('JSON:');\n   console.log(response);\n });\n\n  //v2:\n  //var restclient = require('restler');\n\n\n  //var flight = flight;\n\n// AEROAPI V4:\n\n // new apikey aeroAPI: vbWAKQDHJJFEvXrUHBf7V62caCbfshgP\n /*\n\n curl -X GET \"https://aeroapi.flightaware.com/aeroapi/flights/KLM1503?start=2022-10-05T19%3A59%3A59Z&end=2022-10-07T19%3A59%3A59Z\" \\\n  -H \"Accept: application/json; charset=UTF-8\" \\\n  -H \"x-apikey:  vbWAKQDHJJFEvXrUHBf7V62caCbfshgP\" \\\n\n\n\n--------------------\n  I need to use an API in my website that has it documentation written in CURL commands. Specifically I would like to know how can I use a command like this on my React app.\n\n  curl -H token:\"sfg999666t673t7t82\" -H \"Content-Type: application/json\" -H \"accept: application/json\" -d '{\"id\":\"3970a1b0-6e27-448a-adfc-0083db15b2fb\", \"tokens\":{\"design_token1\":\"Hi\",\"design_token2\":\"Hello\",\"design_token3\":\"World\",\"subject_token1\":\"XYZ\"}, \"recipient\":\"james@sample.com\"}' -X POST \"https://domain.provider.com/mas/api/v1/mail/transaction\"\n\n\n  rewrite it to fetch request:\n\n  fetch(\"https://domain.provider.com/mas/api/v1/mail/transaction\", {\n  body: \"{\\\"id\\\":\\\"3970a1b0-6e27-448a-adfc-0083db15b2fb\\\", \\\"tokens\\\":{\\\"design_token1\\\":\\\"Hi\\\",\\\"design_token2\\\":\\\"Hello\\\",\\\"design_token3\\\":\\\"World\\\",\\\"subject_token1\\\":\\\"XYZ\\\"}, \\\"recipient\\\":\\\"james@sample.com\\\"}\",\n  headers: {\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/json\",\n    Token: \"sfg999666t673t7t82\"\n  },\n  method: \"POST\"\n})\n-------------------\n\n\n */\n\n/*\n  var fxml_url = 'http://flightxml.flightaware.com/json/FlightXML2b/';\n  var username = 'mailstef';\n  var apiKey = '276cc9f2a31caf456f98c4a35692e2ceab507e1e';\n\n  var results = [];\n  var i = 0;\n\n  var apiUrl1stTry = 'https://aeroapi.flightaware.com/aeroapi/flights/KLM1503?start=2022-10-06T19%3A59%3A59Z&end=2022-10-08T19%3A59%3A59Z'\n\n  axios({\n    url: 'https://aeroapi.flightaware.com/aeroapi/flights/KLM1503?start=2022-10-06T19%3A59%3A59Z&end=2022-10-08T19%3A59%3A59Z',\n    method: 'get',\n    headers: {\n      Accept: \"application/json\",\n      \"x-apikey\": 'vbWAKQDHJJFEvXrUHBf7V62caCbfshgP'\n    },\n  })\n    .then(response => {\n      console.log(response);\n    });\n*/\n}\n\n\n\n\n    /*\n\n    restclient.get(fxml_url + 'FlightInfoStatus', {\n        username: username,\n        password: apiKey,\n        query: {ident: flight, howMany: 1, offset: 2}\n    }).on('success', function(result, response) {\n        var flights = result.FlightInfoStatusResult.flights;\n         // eslint-disable-next-line\n        console.log('Flight ' + flight + ' :');\n        for (i in flights) {\n          var flight = flights[i];\n          console.log(flight.ident + \" \" + flight.origin + ' - ' + flight.destination + \" \" + flight.aircrafttype + \" \" + flight.tailnumber);\n          console.log(flight.actual_blockout_time.date + \" \" + flight.actual_blockout_time.time + \" - \" + flight.actual_blockin_time.time);\n\n\n          //let unix_timestamp = 1549312452\n          // Create a new JavaScript Date object based on the timestamp\n          // multiplied by 1000 so that the argument is in milliseconds, not seconds.\n          var dateBO = new Date(flight.actual_blockout_time.epoch * 1000);\n          var dateDep = new Date(flight.actual_departure_time.epoch * 1000);\n          var dateArr = new Date(flight.actual_arrival_time.epoch * 1000);\n          var dateBI = new Date(flight.actual_blockin_time.epoch * 1000);\n\n          results.push({\n            'flightNumber' : flight.ident,\n            'origin' : flight.origin,\n            'destination' : flight.destination,\n            'registration' : flight.tailnumber,\n            'type' : flight.aircrafttype,\n            'offBlock' : dateBO,\n            'takeOff' : dateDep,\n            'landing' : dateArr,\n            'onBlock' : dateBI,\n          });\n\n\n          console.log('--------');\n          console.log(dateBO);\n          console.log(dateDep);\n          console.log(dateArr);\n          console.log(dateBI);\n          console.log('--------');\n          console.log('--------');\n          console.log('--------');\n          console.log('--------');\n\n          return results;\n      }\n    });\n\n    */\n\n\n\n // Response v4:\n\n /*\n {\n   \"flights\": [\n     {\n       \"ident\": \"KLM1503\",\n       \"ident_icao\": \"KLM1503\",\n       \"ident_iata\": \"KL1503\",\n       \"fa_flight_id\": \"KLM1503-1664985821-airline-0513\",\n       \"operator\": \"KLM\",\n       \"operator_icao\": \"KLM\",\n       \"operator_iata\": \"KL\",\n       \"flight_number\": \"1503\",\n       \"registration\": \"PH-NXA\",\n       \"atc_ident\": null,\n       \"inbound_fa_flight_id\": \"KLC954-1664959380-schedule-0110\",\n       \"codeshares\": [\n         \"CAL9483\",\n         \"CES1850\",\n         \"CXA9901\",\n         \"KQA1503\"\n       ],\n       \"codeshares_iata\": [\n         \"CI9483\",\n         \"MU1850\",\n         \"MF9901\",\n         \"KQ1503\"\n       ],\n       \"blocked\": false,\n       \"diverted\": false,\n       \"cancelled\": false,\n       \"position_only\": false,\n       \"origin\": {\n         \"code\": \"EHAM\",\n         \"code_icao\": \"EHAM\",\n         \"code_iata\": \"AMS\",\n         \"code_lid\": null,\n         \"airport_info_url\": \"/airports/EHAM\"\n       },\n       \"destination\": {\n         \"code\": \"LEVC\",\n         \"code_icao\": \"LEVC\",\n         \"code_iata\": \"VLC\",\n         \"code_lid\": null,\n         \"airport_info_url\": \"/airports/LEVC\"\n       },\n       \"departure_delay\": 780,\n       \"arrival_delay\": 1140,\n       \"filed_ete\": 7740,\n       \"foresight_predictions_available\": true,\n       \"scheduled_out\": \"2022-10-07T12:05:00Z\",\n       \"estimated_out\": \"2022-10-07T12:05:00Z\",\n       \"actual_out\": \"2022-10-07T12:18:00Z\",\n       \"scheduled_off\": \"2022-10-07T12:15:00Z\",\n       \"estimated_off\": \"2022-10-07T12:29:00Z\",\n       \"actual_off\": null,\n       \"scheduled_on\": \"2022-10-07T14:24:00Z\",\n       \"estimated_on\": \"2022-10-07T14:38:00Z\",\n       \"actual_on\": null,\n       \"scheduled_in\": \"2022-10-07T14:30:00Z\",\n       \"estimated_in\": \"2022-10-07T14:49:00Z\",\n       \"actual_in\": null,\n       \"progress_percent\": 0,\n       \"status\": \"Taxiing / Left Gate\",\n       \"aircraft_type\": \"E295\",\n       \"route_distance\": 921,\n       \"filed_airspeed\": 385,\n       \"filed_altitude\": null,\n       \"route\": null,\n       \"baggage_claim\": null,\n       \"seats_cabin_business\": null,\n       \"seats_cabin_coach\": null,\n       \"seats_cabin_first\": null,\n       \"gate_origin\": null,\n       \"gate_destination\": null,\n       \"terminal_origin\": null,\n       \"terminal_destination\": null,\n       \"type\": \"Airline\"\n     },\n     {\n       \"ident\": \"KLC1503\",\n       \"ident_icao\": \"KLC1503\",\n       \"ident_iata\": \"WA1503\",\n       \"fa_flight_id\": \"KLC1503-1664971860-schedule-0824\",\n       \"operator\": \"KLC\",\n       \"operator_icao\": \"KLC\",\n       \"operator_iata\": \"WA\",\n       \"flight_number\": \"1503\",\n       \"registration\": null,\n       \"atc_ident\": null,\n       \"inbound_fa_flight_id\": null,\n       \"codeshares\": [\n         \"AFR3230\",\n         \"DAL9485\",\n         \"KLM1503\"\n       ],\n       \"codeshares_iata\": [\n         \"AF3230\",\n         \"DL9485\",\n         \"KL1503\"\n       ],\n       \"blocked\": false,\n       \"diverted\": false,\n       \"cancelled\": false,\n       \"position_only\": false,\n       \"origin\": {\n         \"code\": \"EHAM\",\n         \"code_icao\": \"EHAM\",\n         \"code_iata\": \"AMS\",\n         \"code_lid\": null,\n         \"airport_info_url\": \"/airports/EHAM\"\n       },\n       \"destination\": {\n         \"code\": \"LEVC\",\n         \"code_icao\": \"LEVC\",\n         \"code_iata\": \"VLC\",\n         \"code_lid\": null,\n         \"airport_info_url\": \"/airports/LEVC\"\n       },\n       \"departure_delay\": 0,\n       \"arrival_delay\": 0,\n       \"filed_ete\": 7500,\n       \"foresight_predictions_available\": true,\n       \"scheduled_out\": \"2022-10-07T12:05:00Z\",\n       \"estimated_out\": null,\n       \"actual_out\": null,\n       \"scheduled_off\": \"2022-10-07T12:15:00Z\",\n       \"estimated_off\": \"2022-10-07T12:15:00Z\",\n       \"actual_off\": null,\n       \"scheduled_on\": \"2022-10-07T14:20:00Z\",\n       \"estimated_on\": \"2022-10-07T14:20:00Z\",\n       \"actual_on\": null,\n       \"scheduled_in\": \"2022-10-07T14:30:00Z\",\n       \"estimated_in\": null,\n       \"actual_in\": null,\n       \"progress_percent\": 0,\n       \"status\": \"Scheduled\",\n       \"aircraft_type\": \"E295\",\n       \"route_distance\": 921,\n       \"filed_airspeed\": 385,\n       \"filed_altitude\": null,\n       \"route\": null,\n       \"baggage_claim\": null,\n       \"seats_cabin_business\": null,\n       \"seats_cabin_coach\": null,\n       \"seats_cabin_first\": null,\n       \"gate_origin\": null,\n       \"gate_destination\": null,\n       \"terminal_origin\": null,\n       \"terminal_destination\": null,\n       \"type\": \"Airline\"\n     },\n     {\n       \"ident\": \"KLC1503\",\n       \"ident_icao\": \"KLC1503\",\n       \"ident_iata\": \"WA1503\",\n       \"fa_flight_id\": \"KLC1503-1664885580-schedule-0765\",\n       \"operator\": \"KLC\",\n       \"operator_icao\": \"KLC\",\n       \"operator_iata\": \"WA\",\n       \"flight_number\": \"1503\",\n       \"registration\": null,\n       \"atc_ident\": null,\n       \"inbound_fa_flight_id\": null,\n       \"codeshares\": [\n         \"AFR3230\",\n         \"DAL9485\",\n         \"KLM1503\"\n       ],\n       \"codeshares_iata\": [\n         \"AF3230\",\n         \"DL9485\",\n         \"KL1503\"\n       ],\n       \"blocked\": false,\n       \"diverted\": false,\n       \"cancelled\": true,\n       \"position_only\": false,\n       \"origin\": {\n         \"code\": \"EHAM\",\n         \"code_icao\": \"EHAM\",\n         \"code_iata\": \"AMS\",\n         \"code_lid\": null,\n         \"airport_info_url\": \"/airports/EHAM\"\n       },\n       \"destination\": {\n         \"code\": \"LEVC\",\n         \"code_icao\": \"LEVC\",\n         \"code_iata\": \"VLC\",\n         \"code_lid\": null,\n         \"airport_info_url\": \"/airports/LEVC\"\n       },\n       \"departure_delay\": -1665058501,\n       \"arrival_delay\": -1665066001,\n       \"filed_ete\": 7500,\n       \"foresight_predictions_available\": false,\n       \"scheduled_out\": \"2022-10-06T12:05:00Z\",\n       \"estimated_out\": null,\n       \"actual_out\": null,\n       \"scheduled_off\": \"2022-10-06T12:15:00Z\",\n       \"estimated_off\": \"2022-10-06T12:15:00Z\",\n       \"actual_off\": null,\n       \"scheduled_on\": \"2022-10-06T14:20:00Z\",\n       \"estimated_on\": null,\n       \"actual_on\": null,\n       \"scheduled_in\": \"2022-10-06T14:30:00Z\",\n       \"estimated_in\": null,\n       \"actual_in\": null,\n       \"progress_percent\": 100,\n       \"status\": \"result unknown\",\n       \"aircraft_type\": \"E190\",\n       \"route_distance\": 921,\n       \"filed_airspeed\": 385,\n       \"filed_altitude\": null,\n       \"route\": null,\n       \"baggage_claim\": null,\n       \"seats_cabin_business\": 36,\n       \"seats_cabin_coach\": 64,\n       \"seats_cabin_first\": 0,\n       \"gate_origin\": null,\n       \"gate_destination\": null,\n       \"terminal_origin\": null,\n       \"terminal_destination\": null,\n       \"type\": \"Airline\"\n     },\n     {\n       \"ident\": \"KLM1503\",\n       \"ident_icao\": \"KLM1503\",\n       \"ident_iata\": \"KL1503\",\n       \"fa_flight_id\": \"KLM1503-1664910008-airline-0335\",\n       \"operator\": \"KLM\",\n       \"operator_icao\": \"KLM\",\n       \"operator_iata\": \"KL\",\n       \"flight_number\": \"1503\",\n       \"registration\": \"PH-EXD\",\n       \"atc_ident\": null,\n       \"inbound_fa_flight_id\": \"KLM1344-1664984228-airline-0214\",\n       \"codeshares\": [\n         \"CAL9483\",\n         \"CES1850\",\n         \"CXA9901\",\n         \"KQA1503\"\n       ],\n       \"codeshares_iata\": [\n         \"CI9483\",\n         \"MU1850\",\n         \"MF9901\",\n         \"KQ1503\"\n       ],\n       \"blocked\": false,\n       \"diverted\": false,\n       \"cancelled\": false,\n       \"position_only\": false,\n       \"origin\": {\n         \"code\": \"EHAM\",\n         \"code_icao\": \"EHAM\",\n         \"code_iata\": \"AMS\",\n         \"code_lid\": null,\n         \"airport_info_url\": \"/airports/EHAM\"\n       },\n       \"destination\": {\n         \"code\": \"LEVC\",\n         \"code_icao\": \"LEVC\",\n         \"code_iata\": \"VLC\",\n         \"code_lid\": null,\n         \"airport_info_url\": \"/airports/LEVC\"\n       },\n       \"departure_delay\": 420,\n       \"arrival_delay\": -120,\n       \"filed_ete\": 7800,\n       \"foresight_predictions_available\": true,\n       \"scheduled_out\": \"2022-10-06T12:05:00Z\",\n       \"estimated_out\": \"2022-10-06T12:05:00Z\",\n       \"actual_out\": \"2022-10-06T12:12:00Z\",\n       \"scheduled_off\": \"2022-10-06T12:15:00Z\",\n       \"estimated_off\": \"2022-10-06T12:24:00Z\",\n       \"actual_off\": \"2022-10-06T12:23:44Z\",\n       \"scheduled_on\": \"2022-10-06T14:25:00Z\",\n       \"estimated_on\": \"2022-10-06T14:26:52Z\",\n       \"actual_on\": \"2022-10-06T14:26:52Z\",\n       \"scheduled_in\": \"2022-10-06T14:30:00Z\",\n       \"estimated_in\": \"2022-10-06T14:29:00Z\",\n       \"actual_in\": \"2022-10-06T14:28:00Z\",\n       \"progress_percent\": 100,\n       \"status\": \"Arrived / Gate Arrival\",\n       \"aircraft_type\": \"E190\",\n       \"route_distance\": 921,\n       \"filed_airspeed\": 385,\n       \"filed_altitude\": null,\n       \"route\": null,\n       \"baggage_claim\": \"8\",\n       \"seats_cabin_business\": null,\n       \"seats_cabin_coach\": null,\n       \"seats_cabin_first\": null,\n       \"gate_origin\": \"B16\",\n       \"gate_destination\": null,\n       \"terminal_origin\": null,\n       \"terminal_destination\": null,\n       \"type\": \"Airline\"\n     }\n   ],\n   \"links\": null,\n   \"num_pages\": 1\n }\n\n */\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}